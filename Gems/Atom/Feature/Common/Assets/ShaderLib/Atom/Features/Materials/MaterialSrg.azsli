/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once 

#include <Atom/Features/SrgSemantics.azsli>

// Fallback MaterialSrg for non-bindless support: We create one material-SRG per material-instance
ShaderResourceGroup MaterialSrg : SRG_PerMaterial
{
    MaterialParameters m_params;

#ifndef USE_BINDLESS_SRG
    // the MaterialParameters can only contain texture indices, and no Texture2D directly.
    // if we aren't using the bindless SRG, we register the Textures here, and the index refers to the index in this array 
    Texture2D m_textures[];
#endif

    Sampler m_sampler
    {
        AddressU = Wrap;
        AddressV = Wrap;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        MaxAnisotropy = 16;
    };
}

#ifdef USE_BINDLESS_SRG
#include <Atom/Features/Bindless.azsli>
#endif

Texture2D asTexture(const int readIndex)
{
    int localReadIndex = readIndex; 
    if (localReadIndex < 0)
    {
        // TODO: choose a suitable fallback texture here.
        localReadIndex = 0;
    }
#ifndef USE_BINDLESS_SRG
    return MaterialSrg::m_textures[localReadIndex];
#else
    return BindlessSrg::GetTexture2D(localReadIndex);
#endif
}

MaterialParameters GetMaterialParameters()
{
    return MaterialSrg::m_params;
}

sampler GetMaterialTextureSampler(/* TODO: sampler params */)
{
    return MaterialSrg::m_sampler;
}

