/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once 


// This is separated out from SceneMaterialSrg.azsli so the SceneMaterialSrg - dummy shader can compile without including anything else besides MaterialSrgDefinition.azsli
#include <Atom/Features/Materials/SceneMaterialSrgDefinition.azsli>

#include <Atom/Features/Bindless.azsli>
Texture2D asTexture(const int readIndex)
{
    int localReadIndex = readIndex; 
    if (localReadIndex < 0)
    {
        // TODO: choose a suitable fallback texture here.
        localReadIndex = 0;
    }
    return Bindless::GetTexture2D(readIndex);
}

MaterialParameters GetMaterialParameters()
{
    int materialTypeBufferIndex = SceneMaterialSrg::m_materialTypeBufferIndices[DrawSrg::m_materialTypeId];
    ByteAddressBuffer materialInstances = Bindless::GetByteAddressBuffer(materialTypeBufferIndex);
    uint baseOffset = sizeof(MaterialParameters) * DrawSrg::m_materialInstanceId;
    uint2 loadedId = materialInstances.Load2(baseOffset);
    if (loadedId.x != DrawSrg::m_materialTypeId || loadedId.y != DrawSrg::m_materialInstanceId)
    {
        return (MaterialParameters)0;
    }

    return materialInstances.Load<MaterialParameters>(sizeof(MaterialParameters) * DrawSrg::m_materialInstanceId);
}

sampler GetMaterialTextureSampler(/* TODO: sampler params */)
{
    return SceneMaterialSrg::m_sampler;
}
